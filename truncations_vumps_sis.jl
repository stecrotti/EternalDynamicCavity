using MPSExperiments
using TensorTrains, LinearAlgebra, Random
using TensorTrains.UniformTensorTrains
using Unzip, Statistics
using TensorTrains, Random, Tullio, TensorCast
using LinearAlgebra
using ProgressMeter
using JLD2

include((@__DIR__)*"/../telegram/notifications.jl")

using Logging
Logging.disable_logging(Logging.Info)

function F(λ, ρ; γ=0)
    SUSCEPTIBLE = 1 
    INFECTIOUS = 2
    function f(xᵢᵗ⁺¹::Integer, xₙᵢᵗ::AbstractVector{<:Integer}, xᵢᵗ::Integer)
        @assert xᵢᵗ⁺¹ ∈ 1:2
        @assert all(x ∈ 1:2 for x in xₙᵢᵗ)

        if xᵢᵗ == INFECTIOUS
            if xᵢᵗ⁺¹ == SUSCEPTIBLE
                return ρ
            else
                return 1 - ρ 
            end
        else
            p = (1-γ)*(1-λ)^sum(xⱼᵗ == INFECTIOUS for xⱼᵗ in xₙᵢᵗ; init=0.0)
            if xᵢᵗ⁺¹ == SUSCEPTIBLE
                return p
            elseif xᵢᵗ⁺¹ == INFECTIOUS
                return 1 - p
            end
        end
    end   
end   


λ = 0.07
ρ = 0.1
f = F(λ, ρ; γ=0)

# ds = [25, 30]
# ds = [5, 10, 15, 20, 25]
# ds = [3, 4, 5, 6]
ds = 2:2:6
# ds = [3, 5]

maxiter = 40
tol = 1e-15

# A0 = reshape([0.210472  0.210472;  0.289528  0.289528], 1,1,2,2)
# A0 = [-0.08803999989318015 0.11908673164283345 -0.00866143517897221 -0.0001944318856584548 -0.00029458610445390576 1.150161703507817e-5 -8.49308502956596e-6 6.675400208946711e-7; 0.20453231906396488 -0.3502068177938542 -0.011166127709168435 0.0015560569397961718 -0.00045558652646957346 -7.779512791920681e-5 -1.3947176900371439e-5 -2.7488473863385137e-6; -0.23381515575527703 -0.19597064712628876 -0.28507990885249807 0.012465621740086882 0.01160482671932344 0.00048724543868394944 0.00019007315577420893 -0.00019764372955699078; -0.013850457559044339 -0.00805830696042479 0.051835723744016536 -0.010542722255135084 -0.028604466045398784 -0.0019221993853778762 -0.0014356097722578436 -0.0013851949495565404; -0.19445832145723468 -0.15194120588339183 0.2684724324006429 -0.048624601815316026 -0.25701764970953633 -0.010355769788741476 0.012031973011855032 0.00021661419505739698; -0.012535541664127885 -0.009499487766266532 0.016595672328106995 -0.05309194287803474 -0.007811176929565874 -0.016223355039398854 -0.0056558727710501805 -0.027598941301764494; 0.09994001891035142 0.08196218141738912 -0.16856440872650152 0.06411133475256613 -0.2956970985107838 0.0010417091024461581 0.24003487256485959 -0.014920700408079595; 0.02816938249466136 0.02537422009796064 -0.05366857761382081 -0.2748232126613357 -0.040823980206986306 -0.060043773113952315 0.040518340412991974 -0.17046479319257102;;; -0.3764147745406829 -0.05851134372865127 0.0004624868860456816 -1.6250528450590858e-5 -3.926170399354567e-6 4.188666083507384e-6 2.2748797968097816e-7 8.660535080856192e-7; -0.1390235201799821 -0.022427442395243646 -0.0009638745262342523 -0.0008575439477439517 3.172579219234088e-5 -3.490421737074827e-6 -4.940110021495017e-6 -1.0455202072454266e-5; 0.020196574151566647 -0.007877219393964187 -0.015152197153657586 -0.011883709856790995 0.0014480075231140907 -0.0006657710537782055 1.1279270360183343e-5 -3.3363617641079434e-5; 0.029912359122538562 -0.1961377101352087 -0.2758921314803794 -0.21442888055615847 0.02465594265705717 -0.010971790401919278 -1.890931019114263e-5 -0.0003330205833674797; -0.0016514722510427 0.02208100698698136 0.02781774827886431 0.035511187821435496 -0.021647978494689194 0.013983693705226386 -6.210987293660425e-5 -0.0015705930602501427; -0.009424581185172174 0.06210530014236393 0.12156171466448062 -0.1660880180116186 0.26493194564783845 -0.21000059686403558 -0.004976583789384932 0.009343096727851446; 0.0013079823277491799 -0.009323661198632979 -0.003127161277418506 0.005954318343228739 0.039183223180346456 0.004661006779827 0.015608066360973213 0.00592297484696244; -0.008530614720693835 0.05499721491189955 0.02958019636605745 -0.1037072588774133 -0.14597179110074884 0.02635173804264945 -0.004020009798949756 -0.07624939859902524;;;; -0.10822113021164334 0.08138890578313471 -0.005042816826966908 0.0004225147272470129 -0.00013866425233402345 -3.14206991602127e-5 -1.1585599283710691e-7 1.3658796599908788e-6; 0.2558885434053456 -0.24628262560404862 -0.013627837583003751 -0.0017967042871403704 -0.0003973622325859435 7.575812525588173e-5 -3.383940545508889e-6 7.990802347763883e-6; -0.2633324689013796 -0.18484985458009728 -0.22500199130866813 -0.002450122190692375 0.011227431120998856 -0.00011379595982216802 0.00041937308072053194 0.00012921227760829537; -0.005034595878823688 -0.004220307591269342 0.041246228069585604 -0.00708315720455022 -0.023127545770971984 -0.0008441207553053899 -0.0012426572068601287 -0.001402027676076597; -0.1382821016426961 -0.1151363445064387 0.21487041694599907 -0.02181516261039421 -0.20845058556702137 0.0010799131065388989 0.008720855119589218 -0.0022503061172854085; -0.008014167064226283 -0.006928676115049125 0.012219876890059727 -0.05989095990018543 -0.003741037252916732 -0.01831099166796421 -0.004215354149168734 -0.022337171523141262; 0.0803723359890485 0.06586406334136488 -0.1328899122567146 0.08725932599541819 -0.24260146590205459 0.024932755089264933 0.19066243947351402 -0.015674915441266164; 0.027459933493033148 0.021718087843340332 -0.04854921252984635 -0.3176467275447994 -0.01938404781984467 -0.06445039654630447 0.03374186515216923 -0.13966263017455674;;; -0.3764147745406829 -0.058511343728651334 0.00046248688604567614 -1.62505284505909e-5 -3.926170399354874e-6 4.188666083507363e-6 2.2748797968100515e-7 8.660535080856452e-7; -0.13902352017998215 -0.02242744239524369 -0.0009638745262342532 -0.0008575439477439508 3.172579219234033e-5 -3.4904217370748536e-6 -4.9401100214950156e-6 -1.045520207245425e-5; 0.02019657415156572 -0.007877219393964007 -0.015152197153657638 -0.011883709856791 0.0014480075231140873 -0.0006657710537782044 1.12792703601833e-5 -3.33636176410794e-5; 0.029912359122536054 -0.1961377101352099 -0.2758921314803798 -0.21442888055615847 0.02465594265705719 -0.010971790401919297 -1.8909310191141444e-5 -0.0003330205833674789; -0.0016514722510466736 0.022081006986983783 0.02781774827886409 0.03551118782143571 -0.02164797849468918 0.013983693705226381 -6.210987293660395e-5 -0.0015705930602501427; -0.009424581185147853 0.0621053001423696 0.12156171466448017 -0.16608801801161846 0.26493194564783806 -0.21000059686403577 -0.004976583789384941 0.009343096727851457; 0.0013079823278955849 -0.009323661198585824 -0.003127161277419259 0.005954318343225265 0.03918322318034647 0.0046610067798269535 0.015608066360973222 0.0059229748469624465; -0.008530614720891021 0.05499721491197597 0.0295801963660517 -0.10370725887741541 -0.14597179110075012 0.02635173804264908 -0.004020009798949795 -0.07624939859902514]
Random.seed!(3)
A0 = rand(1,1,2,2)
A0 = reshape([0.4 0.4; 0.2 0.2], 1,1,2,2)

ε, err, ovl, bel, AA, A = map(eachindex(ds)) do a
    d = ds[a]
    A, _, εs, errs, ovls, beliefs, As = iterate_bp_vumps(F(λ, ρ; γ=1e-2), d; A0, tol, maxiter)
    # @telegram "vumps sis $a/$(length(ds)) finished"
    Base.GC.gc()
    A, _, εs, errs, ovls, beliefs, As = iterate_bp_vumps(f, d; A0=A, tol, maxiter)
    εs, errs, ovls, beliefs, A, As
end |> unzip

using Plots

p_ss_montecarlo = 0.352887587128715
p_ss_mpbp = 0.35301856060787556


x = λ / ρ
k = 3
p_ss_cme = (x*(k-1)-1) / (x*(k-1)-1 + (k-1)/k)

pls = map(zip(ε, err, ovl, ds, bel)) do (εs, errs, ovls, d, beliefs)
    p1 = plot(replace(εs, 0.0 => NaN), xlabel="iter", yaxis=:log10, ylabel="converg error", label="")
    p2 = plot(errs, xlabel="iter", yaxis=:log10, ylabel="trunc err on marginals", label="", title="d=$d")
    p3 = plot(abs.(1 .- replace(ovls, 1.0 => NaN)), xlabel="iter", yaxis=:log10, ylabel="|1-trunc ovl|", label="")
    p4 = plot([b[2] for b in beliefs], ylabel="p(xᵢ=INFECT)", ylims=(-1,3), label="")
    # hline!(p4, [0.5798385304677115] , label="", ls=:dash)
    hline!(p4, [p_ss_montecarlo] , label="montecarlo", ls=:dash)
    # hline!(p4, [p_ss_mpbp] , label="MPBP", ls=:dash)
    # p5 = plot([minimum(b) for b in beliefs], ylabel="min marginal", label="")
    plot(p1, p2, p3, p4, layout=(1,4), size=(1200,250), margin=5Plots.mm, labelfontsize=9)
end
pl = plot(pls..., layout=(length(ds),1), size=(1000, 250*length(ds)), margin=5Plots.mm,
    xticks = 0:(maxiter÷2):maxiter, xlabel="iter")
# savefig(pl, (@__DIR__)*"/vumps_sis.pdf")


ps = [b[findlast(x->!all(isnan, x), b)][2] for b in bel]
pl_ps = scatter(ds, ps, xlabel="bond dim", ylabel="p(xᵢ=INFECT)", label="",
    ms=2, c=:black)
hline!(pl_ps, [p_ss_montecarlo], label="montecarlo", ylims=(0,1))
hline!(pl_ps, [p_ss_mpbp] , label="MPBP")
# hline!(pl_ps, [p_ss_cme], label="cavity master eq")
plot!(pl_ps, title="λ=$λ, ρ=$ρ")
# savefig(pl_ps, "vumps_sis_bonddims.pdf")

# jldsave("data/vumps_sis.jld2"; λ, ρ, ds, A0, ε, err, ovl, bel, AA, A, maxiter, ps, p_ss_montecarlo, p_ss_mpbp)

@telegram "vumps sis finished"